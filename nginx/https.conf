# O padrão é apenas um worker
worker_processes 4;

upstream django {
    # Django/uwsgi em Socket
    server unix:///caminho/para/mysite/django_caco-uwsgi.socket;
    # Django/uwsgi em TCP
    #server 127.0.0.1:8001;
}

events {
    # O padrão é 1024 conexões por worker
    worker_connections  2048;
}

http {
    # Incluímos os tipos de arquivos que serviremos
    include mime.types;

    # Desativamos log de acesso para melhorar IO
    #access_log off;

    # Não enviar informações do servidor
    server_tokens   off;

    # Adicionamos no header algumas proteções
    # https://www.humankode.com/ssl/how-to-set-up-free-ssl-certificates-from-lets-encrypt-using-docker-and-nginx
    # https://geekflare.com/nginx-webserver-security-hardening-guide/
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN";

    # Definir charset comum aos brasileiros
    charset utf-8;

    # Impedir arquivos muito grandes
    client_max_body_size    75M;

    # Reduzimos timeouts
    client_body_timeout 25; # padrão 60 seg.
    client_header_timeout 25;
    send_timeout 25;

    # Comprimimos
    gzip on;
    gzip_min_length 1024; # apenas arquivos de tamanho >1kb
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    # Para navegadores que não suportam
    gunzip on;

    # Servidor HTTP é redirecionado
    server {
        # Porta do servidor na rede do servidor (irá ouvir pedidos na rede
        # externa)
        listen servidor:80;
        # Para IPv6:
        listen [::]:80;

        server_name www.caco.ic.unicamp.br caco.ic.unicamp.br;

        # Impedimos métodos que não são GET, HEAD e POST
        if ($request_method !~ ^(GET|HEAD|POST)$ ) {
            return 405;
        }

        # .well-known/acme-challenge será usado por Let's Encrypt para
        # certificar de que estamos no controle do domínio
        location ^~ /.well-known {
            allow all;
            root /data/letsencrypt/;
        }

        # Servimos o mirror de Arch Linux
        location /archlinux/ {
            autoindex   on;

            # leitura assíncrona
            sendfile    on;
            tcp_nopush  on;
            aio         threads;

            alias /var/www/archlinux/;
        }

        # Servimos o mirror de Manjaro
        location /manjaro/ {
            autoindex on;

            # leitura assíncrona
            sendfile    on;
            tcp_nopush  on;
            aio         threads;

            alias /var/www/manjaro/;
        }

        location / {
            # Migramos para HTTPS
            rewrite ^ https://$host$request_uri? permanent;
        }
    }

    # Servidor HTTPS
    # Requer certificados já instalados
    server {
        listen servidor:443 ssl http2;
        # Para IPv6:
        listen [::]:443 ssl http2;

        server_name www.caco.ic.unicamp.br caco.ic.unicamp.br;

        ### Configurações HTTPS, segurança e otimizações

        # Configuração TLS
        # https://wiki.mozilla.org/Security/Server_Side_TLS
        # (usando intermediate profile)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers on;

        # HSTS (ngx_http_headers_module é necessário)
        # Só aceitamos conexões HTTPS
        # 63072000 = 2 anos, recomendado pela wiki da Mozilla acima
        # https://scotthelme.co.uk/setting-up-hsts-in-nginx/
        # https://www.nginx.com/blog/http-strict-transport-security-hsts-and-nginx/
        add_header Strict-Transport-Security "max-age=63072000;includeSubDomains" always;

        # Abreviamos o handshake
        # https://vincent.bernat.im/en/blog/2011-ssl-session-reuse-rfc5077
        # 1mb de cache guardará cerca de 4 mil sessões
        ssl_session_cache shared:SSL:10m;
        # 60 minutos para o acordo expirar
        ssl_session_timeout 60m;

        ### Configurações de certificados

        # Conferir certificados usando OCSP
        # https://blog.mozilla.org/security/2013/07/29/ocsp-stapling-in-firefox
        ssl_stapling        on;
        ssl_stapling_verify on;

        # Verificamos a corrente de confiança (chain of trust) para respostas
        # OCSP
        # (ainda do Mozilla)
        ssl_trusted_certificate /etc/letsencrypt/live/www.caco.ic.unicamp.br/fullchain.pem;
        # Usamos o DNS da Cloudflare + APNIC para conferir OCSP
        # https://1.1.1.1
        resolver 1.1.1.1;

        # Nosso certificado
        #ssl_certificate /etc/letsencrypt/live/www.caco.ic.unicamp.br/fullchain.pem;
        #ssl_certificate_key /etc/letsencrypt/live/www.caco.ic.unicamp.br/privkey.pem;

        # Diffie-Hellman parameter for DHE ciphersuites, 2048 bits recomendado
        # (ainda da wiki do Mozilla)
        # É necessário produzir um usando
        # `openssl dhparam -out certificados/dhparam.pem 2048`
        ssl_dhparam /certificados/dhparam.pem;

        # Impedimos métodos que não são GET, HEAD e POST
        if ($request_method !~ ^(GET|HEAD|POST)$ ) {
            return 405;
        }

        # Servimos o /media (em Django, django-site/media/)
        location /media/ {
            autoindex off;

            # tornar a leitura assíncrona e guardada na memória
            sendfile    on;
            tcp_nopush  on;
            aio         on;

            alias /media/;
        }

        # Servimos o /static (em Django, django-site/static/)
        location /static/ {
            autoindex   off;

            gzip_static on;

            # tornar a leitura assíncrona e guardada na memória
            sendfile    on;
            tcp_nopush  on;
            aio         on;

            # como há pouca alteração, deixamos um cache considerável no cliente
            expires 5d;
            add_header Cache-Control "public";

            alias /static/;
        }

        # Servimos o mirror de Arch Linux
        location /archlinux/ {
            autoindex   on;

            # leitura assíncrona
            sendfile    on;
            tcp_nopush  on;
            aio         threads;

            alias /var/www/archlinux/;
        }

        # Servimos o mirror de Manjaro
        location /manjaro/ {
            autoindex on;

            # leitura assíncrona
            sendfile    on;
            tcp_nopush  on;
            aio         threads;

            alias /var/www/manjaro/;
        }

        # Qualquer outra requisição, enviamos ao django (configurada lá em cima)
        location / {
            include     /caminho/para/raiz/nginx/uwsgi_params;
            uwsgi_pass  django;
        }
    }
}

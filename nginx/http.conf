# O padrão é apenas um worker
worker_processes 4;

upstream django {
    # Django/uwsgi em Socket
    server unix:///caminho/para/mysite/django_caco-uwsgi.socket;
    # Django/uwsgi em TCP
    #server 127.0.0.1:8001;
}

events {
    # O padrão é 1024 conexões por worker
    worker_connections  2048;
}

http {
    # Incluímos os tipos de arquivos que serviremos
    include mime.types;

    # Desativamos log de acesso para melhorar IO
    #access_log off;

    # Não enviar informações do servidor
    server_tokens   off;

    # Adicionamos no header algumas proteções
    # https://www.humankode.com/ssl/how-to-set-up-free-ssl-certificates-from-lets-encrypt-using-docker-and-nginx
    # https://geekflare.com/nginx-webserver-security-hardening-guide/
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN";

    # Definir charset comum aos brasileiros
    charset utf-8;

    # Impedir arquivos muito grandes
    client_max_body_size    75M;

    # Reduzimos timeouts
    client_body_timeout 25; # padrão 60 seg.
    client_header_timeout 25;
    send_timeout 25;

    # Comprimimos
    gzip on;
    gzip_min_length 1024; # apenas arquivos de tamanho >1kb
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
    # Para navegadores que não suportam
    gunzip on;

    # Servidor apenas HTTP
    server {
        # Porta do servidor na rede do servidor (irá ouvir pedidos na rede
        # externa)
        listen servidor:80;
        # Para IPv6:
        listen [::]:80;

        server_name www.caco.ic.unicamp.br caco.ic.unicamp.br;

        # Impedimos métodos que não são GET, HEAD e POST
        if ($request_method !~ ^(GET|HEAD|POST)$ ) {
            return 405;
        }

        # Servimos o /media (em Django, django-site/media/)
        location /media/ {
            autoindex off;

            # tornar a leitura assíncrona e guardada na memória
            sendfile    on;
            tcp_nopush  on;
            aio         on;

            alias /media/;
        }

        # Servimos o /static (em Django, django-site/static/)
        location /static/ {
            autoindex   off;

            gzip_static on;

            # tornar a leitura assíncrona e guardada na memória
            sendfile    on;
            tcp_nopush  on;
            aio         on;

            # como há pouca alteração, deixamos um cache considerável no cliente
            expires 5d;
            add_header Cache-Control "public";

            alias /static/;
        }

        # Servimos o mirror de Arch Linux
        location /archlinux/ {
            autoindex   on;

            # leitura assíncrona
            sendfile    on;
            tcp_nopush  on;
            aio         threads;

            alias /var/www/archlinux/;
        }

        # Servimos o mirror de Manjaro
        location /manjaro/ {
            autoindex on;

            # leitura assíncrona
            sendfile    on;
            tcp_nopush  on;
            aio         threads;

            alias /var/www/manjaro/;
        }

        # Qualquer outra requisição, enviamos ao django (configurada lá em cima)
        location / {
            include     /caminho/para/raiz/nginx/uwsgi_params;
            uwsgi_pass  django;
        }
    }
}
